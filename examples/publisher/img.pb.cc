// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: img.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "img.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* img_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  img_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_img_2eproto() {
  protobuf_AddDesc_img_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "img.proto");
  GOOGLE_CHECK(file != NULL);
  img_descriptor_ = file->message_type(0);
  static const int img_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(img, src_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(img, dst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(img, name_),
  };
  img_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      img_descriptor_,
      img::default_instance_,
      img_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(img, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(img, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(img));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_img_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    img_descriptor_, &img::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_img_2eproto() {
  delete img::default_instance_;
  delete img_reflection_;
}

void protobuf_AddDesc_img_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\timg.proto\"-\n\003img\022\013\n\003src\030\001 \002(\t\022\013\n\003dst\030\002"
    " \002(\t\022\014\n\004name\030\003 \003(\t", 58);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "img.proto", &protobuf_RegisterTypes);
  img::default_instance_ = new img();
  img::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_img_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_img_2eproto {
  StaticDescriptorInitializer_img_2eproto() {
    protobuf_AddDesc_img_2eproto();
  }
} static_descriptor_initializer_img_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int img::kSrcFieldNumber;
const int img::kDstFieldNumber;
const int img::kNameFieldNumber;
#endif  // !_MSC_VER

img::img()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:img)
}

void img::InitAsDefaultInstance() {
}

img::img(const img& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:img)
}

void img::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  src_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dst_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

img::~img() {
  // @@protoc_insertion_point(destructor:img)
  SharedDtor();
}

void img::SharedDtor() {
  if (src_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete src_;
  }
  if (dst_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dst_;
  }
  if (this != default_instance_) {
  }
}

void img::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* img::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return img_descriptor_;
}

const img& img::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_img_2eproto();
  return *default_instance_;
}

img* img::default_instance_ = NULL;

img* img::New() const {
  return new img;
}

void img::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_src()) {
      if (src_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        src_->clear();
      }
    }
    if (has_dst()) {
      if (dst_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        dst_->clear();
      }
    }
  }
  name_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool img::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:img)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string src = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_src()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->src().data(), this->src().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "src");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_dst;
        break;
      }

      // required string dst = 2;
      case 2: {
        if (tag == 18) {
         parse_dst:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dst()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dst().data(), this->dst().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dst");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // repeated string name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name(this->name_size() - 1).data(),
            this->name(this->name_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:img)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:img)
  return false;
#undef DO_
}

void img::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:img)
  // required string src = 1;
  if (has_src()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->src().data(), this->src().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "src");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->src(), output);
  }

  // required string dst = 2;
  if (has_dst()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dst().data(), this->dst().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dst");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->dst(), output);
  }

  // repeated string name = 3;
  for (int i = 0; i < this->name_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->name(i).data(), this->name(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "name");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:img)
}

::google::protobuf::uint8* img::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:img)
  // required string src = 1;
  if (has_src()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->src().data(), this->src().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "src");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->src(), target);
  }

  // required string dst = 2;
  if (has_dst()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dst().data(), this->dst().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dst");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->dst(), target);
  }

  // repeated string name = 3;
  for (int i = 0; i < this->name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name(i).data(), this->name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->name(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:img)
  return target;
}

int img::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string src = 1;
    if (has_src()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->src());
    }

    // required string dst = 2;
    if (has_dst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dst());
    }

  }
  // repeated string name = 3;
  total_size += 1 * this->name_size();
  for (int i = 0; i < this->name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->name(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void img::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const img* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const img*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void img::MergeFrom(const img& from) {
  GOOGLE_CHECK_NE(&from, this);
  name_.MergeFrom(from.name_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_src()) {
      set_src(from.src());
    }
    if (from.has_dst()) {
      set_dst(from.dst());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void img::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void img::CopyFrom(const img& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool img::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void img::Swap(img* other) {
  if (other != this) {
    std::swap(src_, other->src_);
    std::swap(dst_, other->dst_);
    name_.Swap(&other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata img::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = img_descriptor_;
  metadata.reflection = img_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
