// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: img.proto

#ifndef PROTOBUF_img_2eproto__INCLUDED
#define PROTOBUF_img_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_img_2eproto();
void protobuf_AssignDesc_img_2eproto();
void protobuf_ShutdownFile_img_2eproto();

class img;

// ===================================================================

class img : public ::google::protobuf::Message {
 public:
  img();
  virtual ~img();

  img(const img& from);

  inline img& operator=(const img& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const img& default_instance();

  void Swap(img* other);

  // implements Message ----------------------------------------------

  img* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const img& from);
  void MergeFrom(const img& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string src = 1;
  inline bool has_src() const;
  inline void clear_src();
  static const int kSrcFieldNumber = 1;
  inline const ::std::string& src() const;
  inline void set_src(const ::std::string& value);
  inline void set_src(const char* value);
  inline void set_src(const char* value, size_t size);
  inline ::std::string* mutable_src();
  inline ::std::string* release_src();
  inline void set_allocated_src(::std::string* src);

  // required string dst = 2;
  inline bool has_dst() const;
  inline void clear_dst();
  static const int kDstFieldNumber = 2;
  inline const ::std::string& dst() const;
  inline void set_dst(const ::std::string& value);
  inline void set_dst(const char* value);
  inline void set_dst(const char* value, size_t size);
  inline ::std::string* mutable_dst();
  inline ::std::string* release_dst();
  inline void set_allocated_dst(::std::string* dst);

  // repeated string name = 3;
  inline int name_size() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name(int index) const;
  inline ::std::string* mutable_name(int index);
  inline void set_name(int index, const ::std::string& value);
  inline void set_name(int index, const char* value);
  inline void set_name(int index, const char* value, size_t size);
  inline ::std::string* add_name();
  inline void add_name(const ::std::string& value);
  inline void add_name(const char* value);
  inline void add_name(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& name() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_name();

  // @@protoc_insertion_point(class_scope:img)
 private:
  inline void set_has_src();
  inline void clear_has_src();
  inline void set_has_dst();
  inline void clear_has_dst();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* src_;
  ::std::string* dst_;
  ::google::protobuf::RepeatedPtrField< ::std::string> name_;
  friend void  protobuf_AddDesc_img_2eproto();
  friend void protobuf_AssignDesc_img_2eproto();
  friend void protobuf_ShutdownFile_img_2eproto();

  void InitAsDefaultInstance();
  static img* default_instance_;
};
// ===================================================================


// ===================================================================

// img

// required string src = 1;
inline bool img::has_src() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void img::set_has_src() {
  _has_bits_[0] |= 0x00000001u;
}
inline void img::clear_has_src() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void img::clear_src() {
  if (src_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    src_->clear();
  }
  clear_has_src();
}
inline const ::std::string& img::src() const {
  // @@protoc_insertion_point(field_get:img.src)
  return *src_;
}
inline void img::set_src(const ::std::string& value) {
  set_has_src();
  if (src_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    src_ = new ::std::string;
  }
  src_->assign(value);
  // @@protoc_insertion_point(field_set:img.src)
}
inline void img::set_src(const char* value) {
  set_has_src();
  if (src_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    src_ = new ::std::string;
  }
  src_->assign(value);
  // @@protoc_insertion_point(field_set_char:img.src)
}
inline void img::set_src(const char* value, size_t size) {
  set_has_src();
  if (src_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    src_ = new ::std::string;
  }
  src_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:img.src)
}
inline ::std::string* img::mutable_src() {
  set_has_src();
  if (src_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    src_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:img.src)
  return src_;
}
inline ::std::string* img::release_src() {
  clear_has_src();
  if (src_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = src_;
    src_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void img::set_allocated_src(::std::string* src) {
  if (src_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete src_;
  }
  if (src) {
    set_has_src();
    src_ = src;
  } else {
    clear_has_src();
    src_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:img.src)
}

// required string dst = 2;
inline bool img::has_dst() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void img::set_has_dst() {
  _has_bits_[0] |= 0x00000002u;
}
inline void img::clear_has_dst() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void img::clear_dst() {
  if (dst_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dst_->clear();
  }
  clear_has_dst();
}
inline const ::std::string& img::dst() const {
  // @@protoc_insertion_point(field_get:img.dst)
  return *dst_;
}
inline void img::set_dst(const ::std::string& value) {
  set_has_dst();
  if (dst_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dst_ = new ::std::string;
  }
  dst_->assign(value);
  // @@protoc_insertion_point(field_set:img.dst)
}
inline void img::set_dst(const char* value) {
  set_has_dst();
  if (dst_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dst_ = new ::std::string;
  }
  dst_->assign(value);
  // @@protoc_insertion_point(field_set_char:img.dst)
}
inline void img::set_dst(const char* value, size_t size) {
  set_has_dst();
  if (dst_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dst_ = new ::std::string;
  }
  dst_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:img.dst)
}
inline ::std::string* img::mutable_dst() {
  set_has_dst();
  if (dst_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dst_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:img.dst)
  return dst_;
}
inline ::std::string* img::release_dst() {
  clear_has_dst();
  if (dst_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = dst_;
    dst_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void img::set_allocated_dst(::std::string* dst) {
  if (dst_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dst_;
  }
  if (dst) {
    set_has_dst();
    dst_ = dst;
  } else {
    clear_has_dst();
    dst_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:img.dst)
}

// repeated string name = 3;
inline int img::name_size() const {
  return name_.size();
}
inline void img::clear_name() {
  name_.Clear();
}
inline const ::std::string& img::name(int index) const {
  // @@protoc_insertion_point(field_get:img.name)
  return name_.Get(index);
}
inline ::std::string* img::mutable_name(int index) {
  // @@protoc_insertion_point(field_mutable:img.name)
  return name_.Mutable(index);
}
inline void img::set_name(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:img.name)
  name_.Mutable(index)->assign(value);
}
inline void img::set_name(int index, const char* value) {
  name_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:img.name)
}
inline void img::set_name(int index, const char* value, size_t size) {
  name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:img.name)
}
inline ::std::string* img::add_name() {
  return name_.Add();
}
inline void img::add_name(const ::std::string& value) {
  name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:img.name)
}
inline void img::add_name(const char* value) {
  name_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:img.name)
}
inline void img::add_name(const char* value, size_t size) {
  name_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:img.name)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
img::name() const {
  // @@protoc_insertion_point(field_list:img.name)
  return name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
img::mutable_name() {
  // @@protoc_insertion_point(field_mutable_list:img.name)
  return &name_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_img_2eproto__INCLUDED
